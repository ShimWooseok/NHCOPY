/*****************************************************************************************
* 업무명 : 공통
* 세부업무명 : 공통
* 설명 : 계좌길이, 카드길이 체크
*        날짜유효성 체크
*        주민등록번호, 사업자번호 체크
* 작성자 : 공통팀
* 작성일 : 2013.01.30 
* -----------------------------------------------------------------------------------------
*  변경이력 
* -----------------------------------------------------------------------------------------
*  No 날짜       작성자  내용
*  1  2013.01.30 공통팀  최초작성
******************************************************************************************/

/**
 * 계좌번호 검증 DIGIT
 */
var validation_DEFINE_ACCOUNT_CHECKDIGIT1 = "00175399357117C"; //3-2-6,4-2-6 (첫번째 검증시 안될경우 아래것으로)
var validation_DEFINE_ACCOUNT_CHECKDIGIT2 = "01522467896789C"; //6-2-6 (첫번째 검증)
var validation_DEFINE_ACCOUNT_CHECKDIGIT3 = "00137913791379C"; //3-2-6,4-2-6 (두번째 검증)
var validation_DEFINE_ACCOUNT_CHECKDIGIT4 = "02345678923456C"; //6-2-6 (두번째 검증)
var validation_DEFINE_ACCOUNT_CHECKDIGIT5 = "23456789234567C"; //6-3-6,4-3-6
var validation_DEFINE_ACCOUNT_CHECKDIGIT6 = "0098765434567C8"; //3-4-4-2 신계좌
var validation_DEFINE_ACCOUNT_CHECKDIGIT7 = "002345678923C00"; //3-2-5-3 구축협 
var validation_DEFINE_ACCOUNT_CHECKDIGIT8 = "09876543456789C"; // 3-10-1 가상계좌

/**
 * <pre>
 * 계좌번호 자릿수 체크
 * </pre>
 * @param No : 계좌번호 TextField
 * @return true/false
 */
function validation_cfAccNoSet(No) {
	var resultVar = false;
    if (No.value.length == 11 || No.value.length == 12 || No.value.length == 13 || No.value.length == 14 || No.value.length == 16) {
        resultVar = true;
    }
    else {
    	resultVar = false;
    }
    return resultVar;
}

/**
 * <pre>
 * 계좌번호 유효성 체크
 * </pre>
 * @param sAccount : 계좌번호
 * @param sCheckDigit : validation_DEFINE_ACCOUNT_CHECKDIGIT1 ~ validation_DEFINE_ACCOUNT_CHECKDIGIT8
 * @param iDiv : 
 * @param iFlag : 
 * @return true/false
 */
function validation_cfCheckAccount(sAccount,sCheckDigit,iDiv,iFlag) {
  var   sCD         = "";
  var   sAcct       = "";
  var   iSum        = 0;
  var   iQuotient   = 0;
  var   iTempValue1 = 0;
  var   iTempValue2 = 0;
  var   resultVar = false;

  sAccount = $.trim(sAccount);
  for(var i = 0; i < 15; i++) {
    sCD   = sCheckDigit.substring(i,i+1);
    sAcct = sAccount.substring(i,i+1);

    if(sCD == "C") {
      iTempValue2 = 1*(sAcct);
      continue;
    }
    iSum = iSum + (1*(sCD)) * (1*(sAcct));
  }
  iQuotient = iSum % iDiv;
  if(iFlag !=0) {
    if(iQuotient == 0) iTempValue1 = 1;
    else if(iQuotient == 1) iTempValue1 = 0;
    else iTempValue1 = iDiv - iQuotient;
  } else {
    iTempValue1 = iDiv - iQuotient;
  }
  if(iTempValue1 != iTempValue2)resultVar = false;
  else resultVar = true;
  
  return resultVar;
}

/**
 * <pre>
 * 날짜간 크기 체크
 * date1이 date2보다 크면 false
 * </pre>
 * @param date1 : 비교날짜1
 * @param date2 : 비교날짜2
 * @return true/false
 */
function validation_cfCheckDateNo( date1,date2) {
	var   resultVar = false;	
    Int_data1=parseInt(date1,10);
    Int_data2=parseInt(date2,10);
    if(Int_data1>Int_data2) {
    	 resultVar = false;	
    } else {
    	resultVar = true;
    }
    
    return resultVar;
}

/**
 * <pre>
 * 계좌길이 체크
 * </pre>
 * @param acct : 계좌번호
 * @return true/false
 */
function validation_cfIsAccountLen(fl,acct){
	var resultVar = false;	
	var ACCMINLEN = 10 ;
	var ACCMAXLEN = 15 ;

	if(fl=='1'){
		ACCMAXLEN =  parseInt(ACCMAXLEN) - 1 ;
	}
	if(fl=='2'){
		ACCMINLEN =  parseInt(ACCMINLEN) + 1 ;
	}
	
	if( acct.length < ACCMINLEN  || acct.length > ACCMAXLEN){
		resultVar = false;	
	}else{
		resultVar = true;	
	}
	return resultVar;
}
  
/**
 * <pre>
 * 카드길이 체크
 * </pre>
 * @param acct : 카드번호
 * @return true/false
 */
function validation_cfIsCardLen(acct){
	var resultVar = false;
	var	CARDMINLEN = 16 ;
	if(acct.length != CARDMINLEN){
		resultVar = false;	
	}else{
		resultVar = true;	
	}
	return resultVar;
}

/**
 * <pre>
 * 계좌번호가 신계좌번호인지 체크한다.
 * </pre>
 * @param sAccount : 계좌번호
 * @return true/false
 */
function validation_cfIsNewAccount(sAccount) {
  var   bValid        = false;
  var   sFullAccount  = "";
  
  sAccount = $.trim(sAccount);
  if(sAccount.length == 13) {
    sFullAccount = format_cfFillZeroAccount(sAccount);
    bValid = validation_cfCheckAccount(sFullAccount,validation_DEFINE_ACCOUNT_CHECKDIGIT6,11,1);
  }
  return bValid;
}

/**
 * <pre>
 * 주민등록번호/사업자번호 유효성체크 
 * </pre>
 * @param field : 주민등록번호/사업자번호 Field
 * @return true/false
 */
function validation_cfCheckRegNo( field ) {
    var Data;
    var Length;
    var Digit=0;
    var Sum = 0;
    var resultVar = false;
    var Resident = new util_cfMakeArray('2','3','4','5','6','7','8','9','2','3','4','5');
    Data = field.value;
    Length = Data.length;
    if(Length == 10) {
        if(validation_cfCheckDigit(Data,Length) == false) {
        	return false;
        } else {
        	return true;
        }    
    }
    else if(Length == 13) {
        if(validation_cfCheckDigit(Data,Length) == false)
        {
            return false;
        }
        for(var i = 0 ; i < 12 ; i++)
        {
            Sum += Data.charAt(i) * Resident[i];
        }
        Digit = 11 - (Sum % 11) % 10;
        if((Sum % 11) % 10 == 0)
            Digit = 1;
        if((Sum % 11) % 10 == 1)
            Digit = 0;
        if(Data.charAt(12) != Digit) {
            return false;
        }
        else {
            return true;
        }    
    }
    else {
        return false;
    }
    return true;
}

/**
 * <pre>
 * 가상계좌번호여부 체크
 * - 14자리 계좌중 새로 생긴 가상계좌번호는 790,791,792
 * </pre>
 * @param sAccount : 계좌번호
 * @return true/false
 */
function validation_cfIsVirtualAccount(sAccount) {
  var   bValid      = false;
  var   sNewGwamok  = "";

  sAccount = $.trim(sAccount);
  if(sAccount.length == 14) {
      sNewGwamok = sAccount.substring(0,3);
      if(sNewGwamok == "790" || sNewGwamok == "791" || sNewGwamok == "792") bValid = true;
      else bValid = false;
  }
  return bValid;
}

/**
 * <pre>
 * 해당달의 마지막일을 초과하였는지 체크하는 함수
 * </pre>
 * @param sYear : 년필드값
 * @param sMonth : 달필드값
 * @param sDay : 날필드값
 * @param bCheckOk : 체크구분값
 * @return true/false
 */
function validation_cfCheckLastDay(sYear, sMonth, sDay, bCheckOk)
{
    var res = true;
    var LastDay = date_cfGetMaxDay(sYear, sMonth);
    if (sDay > LastDay)
    {
        if (!bCheckOk) {
            res = bCheckOk;
        }
    }
    return res;
}

/**
 * 맞춤번호 여부 판단
 * - 10자리 13자리 계좌중 새로 생긴 맞춤계좌번호는 끝자리 중조Bit 8 9 일 경우
 * @param sAccount : 계좌번호
 * @return true/false
 */
function validation_cfIsMyAccount(sAccount) {
  var   bValid      = false;
  var   sJoongJoBit = "";
  sAccount = $.trim(sAccount);
  if(sAccount.length == 10) {
      sJoongJoBit = sAccount.substring(9);
  } else if(sAccount.length == 13) {
      sJoongJoBit = sAccount.substring(12);
  }
  if( sJoongJoBit == "8" || sJoongJoBit == "9" ) bValid = true;
  else                                           bValid = false;

  return bValid;
}

/**
 * 숫자여부 확인
 * @param str : 입력문자
 * @param len : 체크길이
 * @return true/false
 */
function validation_cfCheckDigit(str, length) {
	for (var i = 0; i < str.length; i++) {
	   if (!util_reDigit.test(str.charAt(i))) {
		   return false;
	   }
	}
	return true;
}

/**
 * 특수문자 있는지 확인(괄호 제외)
 * @param str : 입력문자
 * @param len : 체크길이
 * @return true/false
 */
function validation_cfCheckSpecialChar(ch) {
    if( ( ch == "~" ) || ( ch == "`" ) || ( ch == "!" ) || ( ch == "@" ) ||
        ( ch == "#" ) || ( ch == "$" ) || ( ch == "%" ) || ( ch == "^" ) ||
        ( ch == "&" ) || ( ch == "*" ) || ( ch == "-" ) || ( ch == "_" ) ||
        ( ch == "+" ) || ( ch == "=" ) || ( ch == "|" ) || ( ch == "\\" ) ||
        ( ch == "{" ) || ( ch == "}" ) || ( ch == "[" ) || ( ch == "]" ) ||
        ( ch == ";" ) || ( ch == ":" ) || ( ch == "\"" ) || ( ch == "'" ) ||
        ( ch == "<" ) || ( ch == ">" ) || ( ch == "," ) || ( ch == "." ) ||
        ( ch == "?" ) || ( ch == "/" ) )
        return true;
    else
        return false;
}

/**
 * <pre>
 * 입력문자에 영문과 숫자가 포함되는지 체크
 * @param str : 입력문자
 * @return 0/1/2
 *         0 : Include alphabet and digits
 *         1 : Not include alphabet
 *         2 : Not include digits
 * </pre>
 */
function validation_cfCheckAlphabetAndDigits(str) {

	var alphabetValid = false;
	var digitsValid = false;
	
	for (var i = 0; i < str.length; i++) {
		if (!util_reDigit.test(str.charAt(i))) {
			alphabetValid = true;
		}
		if (!util_reAlphabetic.test(str.charAt(i))) {
			digitsValid = true;
		}
	}
	
	if (!alphabetValid) {
		return 1;
	} else if (!digitsValid) {
		return 2;
	} else {
		return 0;
	}
}

/**
 * 특수문자 입력 체크
 */
function validation_cfOnlyNumCharCheck(obj) {
	if (obj.value == "") {
		return true;
	}

	var re = /[~!@\#$%^&*\()\-=+_\\|']/gi;
	if (re.test(obj.value)) {
		alert("특수문자는 입력하실 수 없습니다.");
		obj.value = obj.value.replace(re, "");
	}
	return true;
}

/**
 * <pre>
 * 입력필드 숫자 입력
 * 
 * (사용예)
 * &lt;input type=&quot;text&quot; name=&quot;IchAmt&quot; value=&quot;&quot; title=&quot;이체금액 입력&quot; onkeydown=&quot;return validation_cfOnlyNumber(event);&quot; /&gt;
 * </pre>
 * 
 * @author FA 정영탁
 */
function validation_cfOnlyNumber(ev) {
	if (typeof TK_Loading == 'function') {
		if (TK_useTouchEnnxKey(ev)) {
			return true;
		}
	}

	ev = ev || window.event;
	var keyVal = ev.keyCode ? ev.keyCode : ev.which ? ev.which : ev.charCode;
	if ( !( (keyVal >= 112 && keyVal <= 123) // F1~F12
			|| keyVal == 8 // backspace
			|| keyVal == 9 // tab
			|| keyVal == 46 // delete
			|| (keyVal >= 35 && keyVal <= 40) // home,end
			|| (!ev.shiftKey && keyVal >= 48 && keyVal <= 57) // number on keyboard
			|| (!ev.shiftKey && keyVal >= 96 && keyVal <= 105)) ) { // number on keypad
		ev.cancelBubble = true;
		ev.returnValue = false;
		return false;
	}
	return true;
}

/**
 * <pre>
 * 입력필드 영문자 입력
 * </pre>
 * @author FA 정영탁
 */
function validation_cfOnlyAlphabet(ev) {
	if (typeof TK_Loading == 'function') {
		if (TK_useTouchEnnxKey(ev)) {
			return true;
		}
	}

	ev = ev || window.event;
	var keyVal = ev.keyCode ? ev.keyCode : ev.which ? ev.which : ev.charCode;
	if ( !(ev.shiftKey || ev.ctrlKey || ev.altKey
			|| (keyVal >= 112 && keyVal <= 123) // F1~F12
			|| keyVal == 8 // backspace
			|| keyVal == 9 // tab
			|| keyVal == 46 // delete
			|| (keyVal >= 35 && keyVal <= 40) // home,end
			|| (keyVal >= 65 && keyVal <= 90) // A-Z
			|| (keyVal >= 97 && keyVal <= 122)) ) { // a-z
		ev.cancelBubble = true;
		ev.returnValue = false;
		return false;
	}
	return true;
}

/**
 * <pre>
 * 입력필드 영문자,숫자 입력
 * </pre>
 * @author FA 정영탁
 */
function validation_cfOnlyAlphaNumeric(ev) {
	if (typeof TK_Loading == 'function') {
		if (TK_useTouchEnnxKey(ev)) {
			return true;
		}
	}

	ev = ev || window.event;
	var keyVal = ev.keyCode ? ev.keyCode : ev.which ? ev.which : ev.charCode;
	var isAlphaNumeric = (ev.ctrlKey || ev.altKey
			|| (keyVal >= 112 && keyVal <= 123) // F1~F12
			|| keyVal == 8 // backspace
			|| keyVal == 9 // tab
			|| keyVal == 46 // delete
			|| (keyVal >= 35 && keyVal <= 40) // home,end
			|| (!ev.shiftKey && keyVal >= 48 && keyVal <= 57) // number on keyboard
			|| (!ev.shiftKey && keyVal >= 96 && keyVal <= 105) // number on keypad
			|| (keyVal >= 65 && keyVal <= 90) // A-Z
			|| (keyVal >= 97 && keyVal <= 122)); // a-z
	if (isAlphaNumeric) {
		return true;
	} else {
		ev.cancelBubble = true;
		ev.returnValue = false;
		return false;
	}
}

/**
 * (내부함수) 한글 종성체크
 * @param str 문자열
 * @return (0/1/2) : 0=unknown, 1=false, 2=true
 * @author FA 정영탁
 */
function validation_cfIsJongSung(str) {
    var INDETERMINATE = 0;
    var NOJONGSONG = 1;
    var JONGSONG = 2;

    var word = new String(str);                   /* 숫자가 들어오는 등에 대비해 무조건 문자열로 바꿈 */
    var numStr1 = "013678lmnLMN";                 /* '조' 전까지는 0이 받침이 있는걸로 나옴 --; */
    var numStr2 = "2459aefhijkoqrsuvwxyzAEFHIJKOQRSUVWXYZ";
    /* bdgpt들은 읽기에 따라 받침이 있기도 하고 없기도 한다고 판단. */
    /* 대문자는 단독으로 읽을 때를 감안하면 받침 있다고 확정되는 것이 더 적음. */

    if (word == null || word.length < 1) {
        return INDETERMINATE;
    }

    var lastChar = word.charAt(word.length - 1);
    var lastCharCode = word.charCodeAt(word.length - 1);

    if (numStr1.indexOf(lastChar) > -1) {
        return JONGSONG;
    }else if (numStr2.indexOf(lastChar) > -1) {
        return NOJONGSONG;
    }

    if (lastCharCode<0xac00 || lastCharCode>0xda0c) {
        return INDETERMINATE;
    }
    else{
        var lastjongseong = (lastCharCode - 0xAC00) % (21*28) % 28  ;

        if (lastjongseong == 0){
            return NOJONGSONG;
        }else{
            return JONGSONG;
        }
    }
}

/**
 * <pre>
 * jQuery.Validator의 설정값을 이용하여 키 입력의 onkeydown 자동 구현
 * (적용 rule : digits, alphabet, numalpha)
 * 
 * (사용예)
 *   $.alopexready(function() {
 *     validation_cfInitFormValidate($('#f'));
 *   });
 * </pre>
 * @param frm : 폼 object
 * @author FA 정영탁
 */
function validation_cfInitFormValidate(frm) {
	if (frm == null || frm == undefined || typeof(frm) != 'object') {
		return false;
	}
	$(frm).find('input,select,textarea').not('input[type="submit"]').each(function() {
		var rule = eval('(' + $(this).attr('data-validate-rule') + ')');
		if (rule && (rule.digits || rule.alphabet || rule.numalpha)) {
			$(this).css({'ime-mode':'disabled'});
			if (rule.numalpha) {
				$(this).bind('keydown', validation_cfOnlyAlphaNumeric);
				$(this).bind('blur', function(ev){
					$(this).val( util_cfRemoveChar($(this).val(), /[^a-zA-Z0-9]+$/) );
				});
			} else if (rule.alphabet) {
				$(this).bind('keydown', validation_cfOnlyAlphabet);
				$(this).bind('blur', function(ev){
					$(this).val( util_cfRemoveChar($(this).val(), /[^a-zA-Z]+$/) );
				});
			} else if (rule.digits) {
				$(this).bind('keydown', validation_cfOnlyNumber);
				$(this).bind('blur', function(ev){
					$(this).val( util_cfRemoveChar($(this).val(), /[^0-9]+$/) );
				});
			}
		}
	});
}


/**
 * <pre>
 * jQuery.Validator를 이용한 FORM 체크
 * </pre>
 * @param frm : 폼 object
 * @return true/false
 * @author FA 정영탁
 */
function validation_cfCheckFormValidate(frm) {
	if (frm == null || frm == undefined || typeof(frm) != 'object') {
		return false;
	}
	if (!$(frm).validate()) {
		var emsg = $(frm).validator().getErrorMessage();
		for (var prop in emsg) {
			var elem = $(frm).find('[name="'+prop+'"]');
			var alias = elem.attr('data-alias');
			if (alias != null && alias != undefined && alias != '') {
				var un0 = new Array("(은)는", "는", "은");
				alert(alias + un0[validation_cfIsJongSung(alias)] + ' ' + emsg[prop][0]);
			} else {
				alert(emsg[prop][0]);
			}
			if (elem.attr('type') != 'hidden') {
				elem.focus();
			}
			break;
		}
		return false;
	}
	return true;
}

/** 
 * validation_cfCheckFormValidate_LargeForm(elems)
 * - IE7에서 대용량 Form validate를 위한 대체 메소드.
 * 
 * @param elems : form 내의 data-validate-rule attribute가 있는 elements를 담은 array
 * @returns {Boolean}
 */
function validation_cfCheckFormValidate_LargeForm(elems) {
	if (elems == null || elems == undefined || typeof(elems) != 'object') {
		return false;
	}
	var result = true;
	
	$.each(elems, function (idx, value){
		if (!$(value).validate()) {
			result = false;
			var emsg = $(value).validator().getErrorMessage();
			for (var prop in emsg) {
				var elem = $(value);
				var alias = elem.attr('data-alias');
				if (alias != null && alias != undefined && alias != '') {
					var un0 = new Array("(은)는", "는", "은");
					alert(alias + un0[validation_cfIsJongSung(alias)] + ' ' + emsg[prop]);
				} else {
					alert(emsg[prop]);
				}
				if (elem.attr('type') != 'hidden') {
					elem.focus();
				}
				break;
			}
			return false;
		}
	});
	
	if(result){
		return true;
	}else{
		return false;
	}
}

/**
 * <pre>
 * jQuery.Validator를 이용한 필드 체크
 * </pre>
 * @param field : 필드 ID 또는 Object
 * @return true/false
 * @author FA 정영탁
 */
function validation_cfCheckFieldValidate(field) {
	if (typeof(field) == 'object') {
		field = $(field);
	} else {
		field = $('#'+field);
	}

	if (!field.validate()) {
		var emsg = field.validator().getErrorMessage();
		var alias = field.attr('data-alias');
		if (alias != null && alias != undefined && alias != '') {
			var un0 = new Array("(은)는", "는", "은");
			alert(alias + un0[validation_cfIsJongSung(alias)] + ' ' + emsg[0]);
		} else {
			alert(emsg[0]);
		}
		if (field.attr('type') != 'hidden') {
			field.focus();
		}
		return false;
	}
	return true;
}


/**
 * 회원ID자릿수가 6 - 10인지 체크
 * @param obj     - 체크 필드
 * @param msg     - false일 때 띄울 메시지
 * @param emptyOk - 공백필드 true/false
 * @param iMin    - 입력 최소값
 * @param iMax    - 입력 최대값
 * @return true/false
 */
function validation_cfCheckID(obj, msg, emptyOk, iMin, iMax) {
	obj.value = $.trim(obj.value);
	
    for(var i=0; i<obj.value.length; i++) {
        var ch = obj.value.charCodeAt(i);
        if(ch > 128){ alert(msg); obj.focus(); return false; }
    }    
    
    if(iMin == null){ iMin = 5;  }
    if(iMax == null){ iMax = 10; }
    
    var result = true;
    
    if(obj.value.length>=iMin && obj.value.length<=iMax) {
    	if(/^[a-zA-Z0-9]+$/g.test(obj.value) == false){ result = false; }
    	else{ result = true;  }
    	
    } else {
    	if(!emptyOk){ alert(msg); obj.focus(); }
    	result = emptyOk;
    }
    return result;
}

/**
 * <pre>
 * 모바일웹(M사이트) jQuery.Validator를 이용한 FORM 체크
 * </pre>
 * @param frm : 폼 object
 * @return true/false
 * @author FA 정영탁
 */
function validation_pmCheckFormValidate(frm) {
	if (frm == null || frm == undefined || typeof(frm) != 'object') {
		return false;
	}
	if (!$(frm).validate()) {
		var emsg = $(frm).validator().getErrorMessage();
		for (var prop in emsg) {
			var elem = $(frm).find('[name="'+prop+'"]');
			var alias = elem.attr('data-alias');
			if (alias != null && alias != undefined && alias != '') {
				var un0 = new Array("(은)는", "는", "은");
				alert(alias + un0[validation_cfIsJongSung(alias)] + ' ' + emsg[prop][0]);
			} else {
				alert(emsg[prop][0]);
			}
			if (elem.attr('type') != 'hidden') {
				elem.val('').focus();
			}
			break;
		}
		return false;
	}
	return true;
}